"""
	Author: Luis_C-137
	Compare all methods.
		Epsilon Greedy
		Optimistic  Initial Values
		UCB1
		Thomson Sampling / Bayesian Method
"""

import math
import numpy as np
import matplotlib.pyplot as plt 

upper_limit = 5

class Bandit:
	def __init__(self,m,mean):
		self.m = m
		self.mean = mean
		self.N = 0

	def pull(self):
		return np.random.rand() + self.m

	def update(self, x):
		self.N += 1
		self.mean = (1 -1.0/self.N) * self.mean + 1.0 / self.N * x

	def getUCB1(self,n):
		return self.mean + math.sqrt(2 * math.log(n) / (self.N + 0.00000001))

def doGreedyEpsilon(m1,m2,m3,eps,N):
	global epsilon
	bandits = [Bandit(m1,0), Bandit(m2,0), Bandit(m3,0)]

	data = np.empty(N)

	for i in range(N):
		# epsilon greedy
		p = np.random.random()
		if p < 1.0/(i+1):
			j = np.random.choice(3)
		else:
			j = np.argmax([b.mean for b in bandits])
		x = bandits[j].pull()
		bandits[j].update(x)

		# for the plot
		data[i] = x
	cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
	epsilon = cumulative_average

def doOptimisticInitialValues(m1,m2,m3,eps,N):
	global optimistic
	bandits = [Bandit(m1,upper_limit), Bandit(m2,upper_limit), Bandit(m3,upper_limit)]

	data = np.empty(N)

	for i in range(N):
		# epsilon greedy
		p = np.random.random()
		if p < eps:
			j = np.random.choice(3)
		else:
			j = np.argmax([b.mean for b in bandits])
		x = bandits[j].pull()
		bandits[j].update(x)

		# for the plot
		data[i] = x
	cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
	optimistic = cumulative_average

def doUCB1(m1,m2,m3,eps,N):
	global UCB1
	bandits = [Bandit(m1,0), Bandit(m2,0), Bandit(m3,0)]

	data = np.empty(N)

	for i in range(N):
		j = np.argmax([b.getUCB1(i+1) for b in bandits])
		x = bandits[j].pull()
		bandits[j].update(x)

		# for the plot
		data[i] = x
	cumulative_average = np.cumsum(data) / (np.arange(N) + 1)
	UCB1 = cumulative_average

def compare():
	# plot moving average ctr
	plt.title('Comparation')
	plt.plot(epsilon)
	plt.plot(optimistic)
	plt.plot(UCB1)
	plt.legend(['Epsilon greedy','Optimistic intial value','UCB1'])
	plt.xscale('log')
	plt.show()

def main():
	print("\n\n---------------------")
	print("And so it begins...\n\n\n")
	
	doGreedyEpsilon(1.0,2.0,3.0,0.01,10000)
	doOptimisticInitialValues(1.0,2.0,3.0,0.01,10000)
	doUCB1(1.0,2.0,3.0,0.01,10000)

	compare()
	

if __name__ == '__main__':
	main()
else:
	print("Importing module {} may not be useful".format(__name__))



